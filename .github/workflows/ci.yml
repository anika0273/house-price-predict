name: CI Pipeline

# ðŸš€ Trigger this workflow on push or PR to main
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-validate:
    name: CI - Build & Validate
    runs-on: ubuntu-latest

    steps:
      # âœ… Step 1: Clone the repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # âœ… Step 2: Setup Python environment
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # âœ… Step 3: Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest

      # âœ… Step 4: Run linting (PEP8 style check) Scans your code using flake8, Ensures clean, readable code
      - name: Run linter (flake8)
        run: |
          flake8 api/ frontend/ ml_models/ --max-line-length=100 --ignore=E203,W503

      # âœ… Step 5: Run model script to ensure it works
      - name: Test ML model training script
        run: |
          python ml_models/train_model.py

      # âœ… Step 6: Set up Docker Buildx (for building images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # âœ… Step 7: Build backend Docker image
      - name: Build backend Docker image
        run: docker build -f api/Dockerfile -t house-backend .

      # âœ… Step 8: Build frontend Docker image
      - name: Build frontend Docker image
        run: docker build -f frontend/Dockerfile -t house-frontend .

      # âœ… Step 9: Start Backend service in detached mode
      - name: Start backend service
        run: docker compose up -d api

      # âœ… Step 10: (Optional) Run unit tests if you add them
      - name: Run unit tests
        run: |
          pytest tests/

      # âœ… Step 10: Success confirmation
      - name: Success message
        run: echo "âœ… CI pipeline completed successfully!"
